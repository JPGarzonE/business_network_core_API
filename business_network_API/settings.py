"""
Django settings for business_network_API project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from datetime import timedelta
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#5r-#squ6!+_80=nkd*_5hi7*j=f#^!(68=nj9nu)4%*)7t!z0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['business-network-webapp-env.us-west-1.elasticbeanstalk.com', 'BNC-env.us-west-1.elasticbeanstalk.com', 
    'localhost', 'api.joinconecty.com', '127.0.0.1', '172.31.9.80']


# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    # Cors headers
    'corsheaders',

    # postgres
    'django.contrib.postgres',

    # Rest framework
    'rest_framework',
    
    # Swagger
    'drf_yasg',
    
    # Storages
    'storages',
]

LOCAL_APPS = [
    'multimedia',
    'companies',
    'users',
    'suppliers',
    'buyers',
    'market',
    'searches',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'business_network_API.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'business_network_API.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'business_network_db',
    #     'USER': 'root',
    #     'PASSWORD': 'garzonebrath08',
    #     'HOST': '127.0.0.1',
    #     'PORT': '3306',
    # },
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'OPTIONS': {
            'options': '-c search_path=production'
        },
        'NAME': 'conectydb',
        'USER': 'dbmanager',
        'PASSWORD': 'conectyadmindatabase0899',
        'HOST': 'conecty-db.cbs9dsbiuvh9.us-west-1.rds.amazonaws.com',
        'PORT': '5432',
    }
}

# conectyadmindatabase0899

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )
STATIC_ROOT = os.path.join(BASE_DIR, "static") 
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]


# Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.coreapi.AutoSchema',
    'PAGE_SIZE': 10,
    'SEARCH_PARAM': 'q',
}


# JWT Authentication config
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
}


# Corsheaders
CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
    'https://joinconecty.com',
    'https://www.joinconecty.com'
)


# Media files storage config
AWS_UPLOAD_BUCKET = "business-network-profile-files"

AWS_UPLOAD_USERNAME = "business-network-api-core-user"

AWS_UPLOAD_GROUP = "business-network-multimedia-clients"

AWS_UPLOAD_REGION = "us-west-1"

AWS_UPLOAD_ACCESS_KEY_ID = "xxxxx"

AWS_ACCESS_KEY_ID = "xxxxx"

AWS_SECRET_ACCESS_KEY = "xxxxx"

AWS_UPLOAD_SECRET_KEY = "xxxxx"

AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# Email config
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = 'smtp.gmail.com'

EMAIL_HOST_USER = 'api.conecty@gmail.com'

EMAIL_HOST_PASSWORD = 'prkzvweczzmciqim'

EMAIL_PORT = 587

EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'api.conecty@gmail.com'


# Documentation Settings
SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
        'api-key': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': """
                To authenticate a request, the `Authorization` header must be provided along with the user access token (JWT token). \n
                The respective value of the Authorization header must have the format: `Bearer <access_token>`.\n
                To obtain the auth tokens you must go to the `login` endpoint, this will response with two tokens:
                one for access (expires each 15 min) and other for refresh the access token (expires each day).\n
                For refresh both tokens you must go to the `Refresh token` endpoint.
            """
        }
   }
}
