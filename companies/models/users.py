# Models users

# Django
from django.db import models
from django.contrib.auth.models import BaseUserManager  
from django.contrib import auth
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin
from django.utils.translation import ugettext_lazy as _

# Django mail
from django.core.mail import send_mail

# Django timezone
from django.utils import timezone


class UserManager(BaseUserManager):
    """
    A custom user manager to deal with emails as unique identifiers for auth
    instead of usernames. The default that's used is "UserManager"
    """

    def _create_user(self, email, password, full_name, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """
        if not email:
            raise ValueError('The Email must be set')

        if not full_name:
            raise ValueError('The full_name must be set')
        
        email = self.normalize_email(email)
        username = self.generate_username(full_name)

        user = self.model(
            email=email, 
            username=username, 
            full_name=full_name, 
            **extra_fields
        )
        user.set_password(password)
        user.save()

        return user

    def generate_username(self, full_name):
        """Recieve the name of the user and generate a valid username for it."""
        username_lower = full_name.lower()
        generated_username = username_lower.strip().replace(" ", ".")
        i = 0
        while True:
            username = generated_username if i == 0 else generated_username + str(i)
            try:
                self.get( username = username )
            except User.DoesNotExist:
                break
            
            i += 1
        
        return username

    def create_user(self, email, password, full_name, **extra_fields):
        extra_fields.setdefault('is_staff', False)
        extra_fields.setdefault('is_superuser', False)
        return self._create_user(email, password, full_name, **extra_fields)

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')
        return self._create_user(email, password, **extra_fields)

    def with_perm(self, perm, is_active=True, include_superusers=True, backend=None, obj=None):
        if backend is None:
            backends = auth._get_backends(return_tuples=True)
            if len(backends) == 1:
                backend, _ = backends[0]
            else:
                raise ValueError(
                    'You have multiple authentication backends configured and '
                    'therefore must provide the `backend` argument.'
                )
        elif not isinstance(backend, str):
            raise TypeError(
                'backend must be a dotted import path string (got %r).'
                % backend
            )
        else:
            backend = auth.load_backend(backend)
        if hasattr(backend, 'with_perm'):
            return backend.with_perm(
                perm,
                is_active=is_active,
                include_superusers=include_superusers,
                obj=obj,
            )
        return self.none()


class User(AbstractBaseUser, PermissionsMixin):
    """
    Custom user for the platform, without username,
    first_name and last_name.
    """
    id = models.BigAutoField(primary_key=True)
    
    email = models.EmailField(null = False, unique=True)

    username = models.CharField(help_text = _("Username generated by the system"),
        max_length = 60, null = False, unique = True)

    full_name = models.CharField(help_text = _("Complete real name of the user"), max_length=50)

    is_staff = models.BooleanField(
        _('staff status'),
        default=False,
        help_text=_('Designates whether the user can log into this site.'),
    )

    is_active = models.BooleanField(
        _('active'),
        default=True,
        help_text=_(
            'Designates whether this user should be treated as active. '
            'Unselect this instead of deleting accounts.'
        ),
    )

    is_client = models.BooleanField(
        'client',
        default=True,
        help_text=(
            'Help easily distinguish users and perform queries. '
            'Clients are the main type of user.'
        )
    )

    is_verified = models.BooleanField(
        'verified',
        default=False,
        help_text='Set to true when the user have verified its email address.'
    )

    date_joined = models.DateTimeField(_('date joined'), default=timezone.now)
    
    USERNAME_FIELD = 'email'

    objects = UserManager()

    def __str__(self):
        return self.username

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')
        db_table = 'auth_user'

    def save(self, *args, **kwargs):
        """Manage denormalization with the CompanyMember model."""

        if self.pk:
            user_companies = CompanyMember.objects.filter(
                user = self)

            for membership in user_companies:
                membership.user_email = self.email
                membership.user_username = self.username
                membership.user_full_name = self.full_name
                membership.save()

        super(User, self).save(*args, **kwargs)

    def clean(self):
        super().clean()
        self.email = self.__class__.objects.normalize_email(self.email)

    def get_full_name(self):
        return self.email

    def get_short_name(self):
        return self.email

    def email_user(self, subject, message, from_email=None, **kwargs):
        """Send an email to this user."""
        send_mail(subject, message, from_email, [self.email], **kwargs)


class CompanyMember(models.Model):
    """
    User member of a company. This user has access to 
    the company account according the assigned permissions.
    """

    id = models.BigAutoField(primary_key=True)

    company = models.ForeignKey(
        'Company', verbose_name = _('company account'), on_delete = models.PROTECT,
        help_text = _('Company that is accesible for its members (user).')
    )

    user = models.ForeignKey(
        User, verbose_name = _('company employee'), on_delete = models.PROTECT,
        help_text = _('User that has access to the company account')
    )

    number_of_logins_in_supplier_profile = models.PositiveIntegerField( default = 0 )

    number_of_logins_in_buyer_profile = models.PositiveIntegerField( default = 0 )

    company_accountname = models.CharField(
        max_length = 60, null = False, unique = True,
        help_text = _("Attribute accountname of the company model. Denormalized for fast access.")
    )
    
    company_name = models.CharField(
        max_length=60, null = False, unique = True,
        help_text = _("Attribute name of the company model. Denormalized for fast access.")
    )

    user_email = models.EmailField(
        null = False, unique=True,
        help_text = _("Attribute email of the user model. Denormalized for fast access.")
    )

    user_username = models.CharField(
        max_length = 60, null = False, unique = True,
        help_text = _("Attribute username of the user model. Denormalized for fast access."),
    )

    user_full_name = models.CharField(
        max_length=50,
        help_text = _("Attribute full_name of the user model. Denormalized for fast access.")
    )

    class Meta:
        db_table = 'company_member'
        unique_together = (('company', 'user'),)