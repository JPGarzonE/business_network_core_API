# Generated by Django 3.0.5 on 2020-04-24 23:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_client', models.BooleanField(default=True, help_text='Help easily distinguish users and perform queries. Clients are the main type of user.', verbose_name='client')),
                ('is_verified', models.BooleanField(default=True, help_text='Set to true when the user have verified its email address.', verbose_name='verified')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('verified', models.BooleanField(default=False)),
                ('state', models.CharField(choices=[(users.models.Verification.States['NONE'], 'None'), (users.models.Verification.States['INPROGRESS'], 'InProgress'), (users.models.Verification.States['STOPPED'], 'Stopped'), (users.models.Verification.States['LOCKED'], 'Locked'), (users.models.Verification.States['SUCCESS'], 'Success')], default=users.models.Verification.States['NONE'], max_length=15)),
                ('application_date', models.DateTimeField(blank=True, null=True)),
                ('finish_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'verification',
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=9)),
                ('visibility', models.CharField(choices=[(users.models.VisibilityState['PRIVATE'], 'Private'), (users.models.VisibilityState['OPEN'], 'Open'), (users.models.VisibilityState['PERSONALIZED'], 'Personalized'), (users.models.VisibilityState['DELETED'], 'Deleted')], default=users.models.VisibilityState['OPEN'], max_length=20)),
                ('addressed', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relation_addressed', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relation_requester', to=settings.AUTH_USER_MODEL)),
                ('verification', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.Verification')),
            ],
            options={
                'db_table': 'relationship',
                'unique_together': {('requester', 'addressed')},
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=45)),
                ('title', models.CharField(max_length=60)),
                ('objetivo', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=155, null=True)),
                ('visibility', models.CharField(choices=[(users.models.VisibilityState['PRIVATE'], 'Private'), (users.models.VisibilityState['OPEN'], 'Open'), (users.models.VisibilityState['PERSONALIZED'], 'Personalized'), (users.models.VisibilityState['DELETED'], 'Deleted')], default=users.models.VisibilityState['OPEN'], max_length=20)),
                ('relationship', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.Relationship')),
            ],
            options={
                'db_table': 'deal',
                'unique_together': {('id', 'relationship')},
            },
        ),
    ]
