# Generated by Django 3.0.5 on 2021-01-08 00:00

import companies.constants
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('multimedia', '0001_initial'),
        ('companies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('description', models.CharField(blank=True, help_text='Text that describe which aspect certifies the certificate.', max_length=155, null=True)),
                ('logo', models.ForeignKey(blank=True, help_text='Logo that represents the authority that emits the certificate', null=True, on_delete=django.db.models.deletion.CASCADE, to='multimedia.Image')),
            ],
            options={
                'db_table': 'certificate',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('code', models.CharField(help_text='Code that represents the currency', max_length=6)),
                ('region', models.CharField(help_text='Region where the currency come from', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Determines if the currency can be used in the platform')),
            ],
            options={
                'db_table': 'currency',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='name or title as is going to be displayed the product', max_length=50)),
                ('category', models.CharField(help_text='main category for classify the product', max_length=60)),
                ('minimum_price', models.DecimalField(decimal_places=2, help_text='Lower limit of the price. If there is no \n            maximum_price there is only going to be one absolute price.', max_digits=15)),
                ('maximum_price', models.DecimalField(blank=True, decimal_places=2, help_text='Upper limit of the price. If this value exists means that\n            there is a range of prices in which the companies can negotiate.', max_digits=15, null=True)),
                ('measurement_unit', models.CharField(blank=True, help_text='Type of unit that is used to measure and offer the product.', max_length=30, null=True)),
                ('tariff_heading', models.CharField(blank=True, help_text='Value that is used in foreign trade to identify uniquely a product.', max_length=20, null=True)),
                ('minimum_purchase', models.CharField(blank=True, help_text='minimum amount for which the product owner is willing to sell the product.', max_length=30, null=True)),
                ('description', models.CharField(blank=True, help_text='description for add the principal characteristics of the product.', max_length=155, null=True)),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='SupplierCertificate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.Certificate')),
            ],
            options={
                'db_table': 'supplier_certificate',
            },
        ),
        migrations.CreateModel(
            name='SupplierLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=50)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('region', models.CharField(blank=True, max_length=45, null=True)),
                ('address', models.CharField(blank=True, max_length=45, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=45, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Option field for display the location \n            in digital maps with precission.', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Option field for display the location \n            in digital maps with precission.', max_digits=9, null=True)),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
                ('image', models.ForeignKey(blank=True, help_text='Image of the headquarters of the supplier \n            or other image that represents the location.', null=True, on_delete=django.db.models.deletion.CASCADE, to='multimedia.Image')),
            ],
            options={
                'db_table': 'supplier_location',
            },
        ),
        migrations.CreateModel(
            name='SupplierProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('display_name', models.CharField(help_text="Name that is going to be displayed in the profile. This isn't \n            the real name of the company, is a completely election of the profile owner.\n\n            By default the real company name is going to be selected.", max_length=60)),
                ('description', models.CharField(blank=True, help_text='Description of the supplier that is going to be displayed \n            in the profile. Is indepent from the company desciption. But by default \n            this value is going to be loaded with the description of the company', max_length=155, null=True)),
                ('industry', models.CharField(blank=True, max_length=60, null=True)),
                ('contact_area_code', models.CharField(blank=True, help_text='area code of the contact channel of a supplier profile', max_length=5, null=True)),
                ('contact_phone', models.CharField(blank=True, help_text='phone number of the contact channel of a supplier profile', max_length=15, null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='email of the contact channel of a supplier profile', max_length=254, null=True)),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, help_text='date when the profile was activated')),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
                ('certificates', models.ManyToManyField(through='suppliers.SupplierCertificate', to='suppliers.Certificate')),
                ('company', models.OneToOneField(help_text='Company owner of the supplier profile.', on_delete=django.db.models.deletion.PROTECT, to='companies.Company')),
                ('principal_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supplierprofile_principal_location', to='suppliers.SupplierLocation')),
            ],
            options={
                'db_table': 'supplier_profile',
            },
        ),
        migrations.CreateModel(
            name='SupplierSaleLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=50)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('region', models.CharField(blank=True, max_length=45, null=True)),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.SupplierProfile')),
            ],
            options={
                'db_table': 'supplier_sale_location',
            },
        ),
        migrations.AddField(
            model_name='supplierlocation',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.SupplierProfile'),
        ),
        migrations.AddField(
            model_name='suppliercertificate',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.SupplierProfile'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='multimedia.Image')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.Product')),
            ],
            options={
                'db_table': 'product_image',
                'unique_together': {('product', 'image')},
            },
        ),
        migrations.CreateModel(
            name='ProductCertificate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.Certificate')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.Product')),
            ],
            options={
                'db_table': 'product_certificate',
                'unique_together': {('product', 'certificate')},
            },
        ),
        migrations.AddField(
            model_name='product',
            name='certificates',
            field=models.ManyToManyField(help_text='Certificates that the product has.', through='suppliers.ProductCertificate', to='suppliers.Certificate'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_currency',
            field=models.ForeignKey(help_text='Currency in which is configured the product prices', on_delete=django.db.models.deletion.PROTECT, to='suppliers.Currency'),
        ),
        migrations.AddField(
            model_name='product',
            name='principal_image',
            field=models.ForeignKey(blank=True, help_text='Image that appears in the cover of the product. \n            Is the first visible image everywhere.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='product_principal_image', to='multimedia.Image'),
        ),
        migrations.AddField(
            model_name='product',
            name='secondary_images',
            field=models.ManyToManyField(help_text='Secondary images that shows the details of the product.', related_name='product_secondary_images', through='suppliers.ProductImage', to='multimedia.Image'),
        ),
        migrations.AddField(
            model_name='product',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.SupplierProfile'),
        ),
        migrations.CreateModel(
            name='DNAElement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=45)),
                ('category', models.CharField(max_length=45)),
                ('description', models.CharField(blank=True, max_length=155, null=True)),
                ('visibility', models.CharField(choices=[(companies.constants.VisibilityState['PRIVATE'], 'PRIVATE'), (companies.constants.VisibilityState['OPEN'], 'OPEN'), (companies.constants.VisibilityState['PERSONALIZED'], 'PERSONALIZED'), (companies.constants.VisibilityState['DELETED'], 'DELETED')], default='OPEN', max_length=20)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='multimedia.Image')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.SupplierProfile')),
            ],
            options={
                'db_table': 'dna_element',
            },
        ),
        migrations.AlterUniqueTogether(
            name='suppliercertificate',
            unique_together={('supplier', 'certificate')},
        ),
    ]
